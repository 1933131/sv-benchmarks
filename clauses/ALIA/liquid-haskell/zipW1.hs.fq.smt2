(set-logic HORN)
(declare-fun k_23 (Int Int Int Int (Array Int Int) (Array Int Int)) Bool)
(declare-fun k_25 (Int Int Int Int (Array Int Int) (Array Int Int)) Bool)
(declare-fun k_27 (Int Int Int Int (Array Int Int) (Array Int Int)) Bool)
(assert (forall ((EQ_6U Int)
         (dummy..home.rjhala.research.liquidhaskell.include.ghc.list.lhs.716.24 Int)
         (GT_6W Int)
         (dummy..home.rjhala.research.liquidhaskell.include.ghc.list.lhs.716.29 Int)
         (VV_F1 Int)
         (LT_6S Int)
         (len (Array Int Int))
         (cmp (Array Int Int)))
  (=> (and (k_23 EQ_6U
                 GT_6W
                 LT_6S
                 dummy..home.rjhala.research.liquidhaskell.include.ghc.list.lhs.716.24
                 len
                 cmp)
           (k_25 EQ_6U
                 GT_6W
                 LT_6S
                 dummy..home.rjhala.research.liquidhaskell.include.ghc.list.lhs.716.29
                 len
                 cmp)
           (= (select cmp EQ_6U) EQ_6U)
           (= (select cmp GT_6W) GT_6W)
           (= (select cmp LT_6S) LT_6S)
           true)
      (k_27 EQ_6U GT_6W LT_6S VV_F1 len cmp))))
(assert (forall ((VV_F2 Int)
         (VV_31 Int)
         (GT_6W Int)
         (LT_6S Int)
         (EQ_6U Int)
         (len (Array Int Int))
         (cmp (Array Int Int)))
  (=> (and (= (select cmp EQ_6U) EQ_6U)
           (= (select cmp GT_6W) GT_6W)
           (= (select cmp LT_6S) LT_6S)
           (>= (select len VV_31) 0)
           true)
      (k_23 EQ_6U GT_6W LT_6S VV_F2 len cmp))))
(assert (forall ((VV_F3 Int)
         (GT_6W Int)
         (LT_6S Int)
         (xs Int)
         (EQ_6U Int)
         (len (Array Int Int))
         (cmp (Array Int Int)))
  (let ((a!1 (and (not (= (select len VV_F3) (select len xs)))
                  (= (select cmp EQ_6U) EQ_6U)
                  (= (select cmp GT_6W) GT_6W)
                  (= (select cmp LT_6S) LT_6S)
                  (>= (select len xs) 0)
                  (= (select len VV_F3) (select len xs))
                  true)))
    (=> a!1 false))))
(assert (forall ((EQ_6U Int)
         (GT_6W Int)
         (VV_34 Int)
         (xs Int)
         (LT_6S Int)
         (VV_F4 Int)
         (len (Array Int Int))
         (cmp (Array Int Int)))
  (=> (and (= (select cmp EQ_6U) EQ_6U)
           (= (select cmp GT_6W) GT_6W)
           (= (select cmp LT_6S) LT_6S)
           (= (select len VV_34) (select len xs))
           (>= (select len VV_34) 0)
           (>= (select len xs) 0)
           true)
      (k_25 EQ_6U GT_6W LT_6S VV_F4 len cmp))))
(assert (forall ((VV_F5 Int)
         (EQ_6U Int)
         (GT_6W Int)
         (ys Int)
         (xs Int)
         (LT_6S Int)
         (len (Array Int Int))
         (cmp (Array Int Int)))
  (let ((a!1 (and (not (= (select len VV_F5) (select len xs)))
                  (= (select cmp EQ_6U) EQ_6U)
                  (= (select cmp GT_6W) GT_6W)
                  (= (select cmp LT_6S) LT_6S)
                  (>= (select len xs) 0)
                  (= (select len ys) (select len xs))
                  (>= (select len ys) 0)
                  (= (select len VV_F5) (select len xs))
                  true)))
    (=> a!1 false))))

(check-sat)
